// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phoenix.DataHandle.Main.Models;

#nullable disable

namespace Phoenix.DataHandle.Migrations
{
    [DbContext(typeof(PhoenixContext))]
    [Migration("20220409222522_V3_alpha2")]
    partial class V3_alpha2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserRoles_AspNetUsers");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Attendance", b =>
                {
                    b.Property<int>("AttendeeId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.HasKey("AttendeeId", "LectureId");

                    b.HasIndex(new[] { "LectureId" }, "IX_Attendances_Lecture");

                    b.ToTable("Attendances", (string)null);
                });

            modelBuilder.Entity("BroadcastCourse", b =>
                {
                    b.Property<int>("BroadcastId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("BroadcastId", "CourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex(new[] { "BroadcastId" }, "IX_BroadcastCourses_Broadcast");

                    b.ToTable("BroadcastCourses", (string)null);
                });

            modelBuilder.Entity("CourseBook", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "BookId");

                    b.HasIndex("BookId");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseBooks_Course");

                    b.ToTable("CourseBooks", (string)null);
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex(new[] { "CourseId" }, "IX_CourseUsers_Course");

                    b.HasIndex(new[] { "UserId" }, "IX_CourseUsers_User");

                    b.ToTable("CourseUsers", (string)null);
                });

            modelBuilder.Entity("Parenthood", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex(new[] { "ChildId" }, "IX_Parenthoods_Child");

                    b.HasIndex(new[] { "ParentId" }, "IX_Parenthoods_Parent");

                    b.ToTable("Parenthoods", (string)null);
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Type" }, "UQ_AspNetRoles_Type")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedApplicationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(N'')");

                    b.Property<DateTime?>("ObviatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PhoneNumberDependanceOrder")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberVerificationCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("PhoneNumberVerificationCodeCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasDefaultValueSql("(N'')");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PhoneNumber", "PhoneNumberDependanceOrder" }, "IX_AspNetUsers_Phone")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUserName" }, "UQ_AspNetUsers_UserName")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserLogin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex(new[] { "ChannelId", "ProviderKey" }, "IX_AspNetUserLogins_Channel_ProviderKey")
                        .IsUnique();

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "IX_Books_NormalizedName")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.BotFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AskTriggered")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId" }, "IX_BotFeedback_Author");

                    b.ToTable("BotFeedback", (string)null);
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Broadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Audience")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Daypart")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ScheduledFor")
                        .HasPrecision(0)
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AuthorId", "ScheduledFor" }, "IX_Broadcasts_Author_ScheduledFor");

                    b.HasIndex(new[] { "ScheduledFor", "Daypart" }, "IX_Broadcasts_ScheduledFor_Daypart");

                    b.HasIndex(new[] { "SchoolId", "ScheduledFor" }, "IX_Broadcasts_School_ScheduledFor");

                    b.ToTable("Broadcasts");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Channel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "UQ_Channels_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "Provider" }, "UQ_Channels_Provider")
                        .IsUnique();

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ObviatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SchoolId", "NormalizedName" }, "IX_Classrooms_School_NormalizedName")
                        .IsUnique();

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("LastDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ObviatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SubCourse")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SchoolId", "Code" }, "IX_Courses_School_Code")
                        .IsUnique();

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "LectureId" }, "IX_Exams_Lecture");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Page")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex(new[] { "LectureId" }, "IX_Exercises_Lecture");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExamId")
                        .HasColumnType("int");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(9,3)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CourseId" }, "IX_Grades_Course");

                    b.HasIndex(new[] { "ExamId" }, "IX_Grades_Exam");

                    b.HasIndex(new[] { "ExerciseId" }, "IX_Grades_Exercise");

                    b.HasIndex(new[] { "StudentId" }, "IX_Grades_Student");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AttendancesNoted")
                        .HasColumnType("bit");

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("OnlineMeetingLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasPrecision(0)
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex(new[] { "CourseId", "ScheduleId" }, "IX_Lectures_Course_Schedule");

                    b.ToTable("Lectures");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Chapter")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex(new[] { "ExamId" }, "IX_Materials_Exam");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ObviatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex(new[] { "CourseId" }, "IX_Schedules_Course");

                    b.HasIndex(new[] { "CourseId", "DayOfWeek", "StartTime" }, "UQ_Schedules_Course_DayOfWeek_StartTime")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("ObviatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Code" }, "IX_Schools_Code")
                        .IsUnique();

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolInfo", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nchar(16)")
                        .IsFixedLength();

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<string>("PrimaryLanguage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("PrimaryLocale")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<string>("SecondaryLanguage")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("SecondaryLocale")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nchar(8)")
                        .IsFixedLength();

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SchoolId")
                        .HasName("PK_SchoolSettings");

                    b.ToTable("SchoolInfo", (string)null);
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolLogin", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("SchoolId", "ChannelId")
                        .HasName("PK_SchoolChannel");

                    b.HasIndex(new[] { "ChannelId", "ProviderKey" }, "UQ_SchoolChannels_Channel_ProviderKey")
                        .IsUnique();

                    b.ToTable("SchoolLogins");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.User", b =>
                {
                    b.Property<int>("AspNetUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("IdentifierCode")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<DateTime?>("IdentifierCodeCreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSelfDetermined")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("AspNetUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolUser", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "SchoolId");

                    b.HasIndex(new[] { "SchoolId" }, "IX_SchoolUsers_School");

                    b.ToTable("SchoolUsers", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers");
                });

            modelBuilder.Entity("Attendance", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attendances_AspNetUsers");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", null)
                        .WithMany()
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Attendances_Lectures");
                });

            modelBuilder.Entity("BroadcastCourse", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Broadcast", null)
                        .WithMany()
                        .HasForeignKey("BroadcastId")
                        .IsRequired()
                        .HasConstraintName("FK_BroadcastCourses_Broadcasts");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_BroadcastCourses_Courses");
                });

            modelBuilder.Entity("CourseBook", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseBooks_Books");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CourseBooks_Courses");
                });

            modelBuilder.Entity("CourseUser", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseUsers_Courses");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseUsers_AspNetUsers");
                });

            modelBuilder.Entity("Parenthood", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .IsRequired()
                        .HasConstraintName("FK_Parenthoods_AspNetUsers_Child");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .IsRequired()
                        .HasConstraintName("FK_Parenthoods_AspNetUsers_Parent");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Channel", "Channel")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_Channels");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers");

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.BotFeedback", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", "Author")
                        .WithMany("BotFeedbacks")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_BotFeedback_AspNetUsers");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Broadcast", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", "Author")
                        .WithMany("Broadcasts")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Broadcasts_AspNetUsers");

                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Broadcasts")
                        .HasForeignKey("SchoolId")
                        .IsRequired()
                        .HasConstraintName("FK_Broadcasts_Schools");

                    b.Navigation("Author");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Classroom", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Classrooms")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Classrooms_Schools");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Course", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Courses")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Courses_Schools");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exam", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", "Lecture")
                        .WithMany("Exams")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Exams_Lectures");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exercise", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", "Book")
                        .WithMany("Exercises")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Exercises_Books");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", "Lecture")
                        .WithMany("Exercises")
                        .HasForeignKey("LectureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Exercises_Lectures");

                    b.Navigation("Book");

                    b.Navigation("Lecture");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Grade", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Grades")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Grades_Courses");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Exam", "Exam")
                        .WithMany("Grades")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Grades_Exams");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Exercise", "Exercise")
                        .WithMany("Grades")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK_Grades_Exercises");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_Grades_AspNetUsers");

                    b.Navigation("Course");

                    b.Navigation("Exam");

                    b.Navigation("Exercise");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Lecture", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Classroom", "Classroom")
                        .WithMany("Lectures")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_Lectures_Classrooms");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Lectures")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Lectures_Courses");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Schedule", "Schedule")
                        .WithMany("Lectures")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Lectures_Schedules");

                    b.Navigation("Classroom");

                    b.Navigation("Course");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Material", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", "Book")
                        .WithMany("Materials")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Materials_Books");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Exam", "Exam")
                        .WithMany("Materials")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Materials_Exams");

                    b.Navigation("Book");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Schedule", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Classroom", "Classroom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Schedules_Classrooms");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Schedules")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedules_Courses");

                    b.Navigation("Classroom");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolInfo", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithOne("SchoolInfo")
                        .HasForeignKey("Phoenix.DataHandle.Main.Models.SchoolInfo", "SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SchoolSettings_Schools");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolLogin", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Channel", "Channel")
                        .WithMany("SchoolLogins")
                        .HasForeignKey("ChannelId")
                        .IsRequired()
                        .HasConstraintName("FK_SchoolLogins_Channels");

                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("SchoolLogins")
                        .HasForeignKey("SchoolId")
                        .IsRequired()
                        .HasConstraintName("FK_SchoolLogins_Schools");

                    b.Navigation("Channel");

                    b.Navigation("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.User", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", "AspNetUser")
                        .WithOne("User")
                        .HasForeignKey("Phoenix.DataHandle.Main.Models.User", "AspNetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_AspNetUsers");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("SchoolUser", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SchoolUsers_Schools");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SchoolUsers_AspNetUsers");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserLogins");

                    b.Navigation("BotFeedbacks");

                    b.Navigation("Broadcasts");

                    b.Navigation("Grades");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Book", b =>
                {
                    b.Navigation("Exercises");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Channel", b =>
                {
                    b.Navigation("AspNetUserLogins");

                    b.Navigation("SchoolLogins");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Classroom", b =>
                {
                    b.Navigation("Lectures");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Course", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Lectures");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exam", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("Materials");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exercise", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Lecture", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Schedule", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.School", b =>
                {
                    b.Navigation("Broadcasts");

                    b.Navigation("Classrooms");

                    b.Navigation("Courses");

                    b.Navigation("SchoolInfo")
                        .IsRequired();

                    b.Navigation("SchoolLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
