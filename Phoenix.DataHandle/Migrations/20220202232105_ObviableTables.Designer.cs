// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Phoenix.DataHandle.Main.Models;

namespace Phoenix.DataHandle.Migrations
{
    [DbContext(typeof(PhoenixContext))]
    [Migration("20220202232105_ObviableTables")]
    partial class ObviableTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedApplicationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((-1))");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("ObviatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumberVerificationCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("PhoneNumberVerificationCode_at")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.HasIndex("PhoneNumber")
                        .HasName("PhoneNumberIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Attendance", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "LectureId");

                    b.HasIndex("LectureId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("IX_Book");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.BotFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AskTriggered")
                        .HasColumnType("bit");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<short?>("Rating")
                        .HasColumnType("smallint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BotFeedback");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Broadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Audience")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int>("Daypart")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("ScheduledDate")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Broadcast");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<DateTimeOffset?>("ObviatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId", "NormalizedName")
                        .IsUnique()
                        .HasName("IX_Classroom");

                    b.ToTable("Classroom");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("Code")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTimeOffset>("FirstDate")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastDate")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTimeOffset?>("ObviatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("SubCourse")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("SchoolId", "Code")
                        .IsUnique()
                        .HasName("IX_Course");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.CourseBook", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("CourseBook");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("LectureId")
                        .IsUnique()
                        .HasName("ExamLectureIdIndex");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("LectureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Page")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("LectureId");

                    b.ToTable("Exercise");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Lecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnlineMeetingLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Lecture");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Chapter")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("ExamId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Parenthood", b =>
                {
                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("Parenthood");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ObviatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<DateTimeOffset>("StartTime")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId", "DayOfWeek", "StartTime")
                        .IsUnique()
                        .HasName("UQ_Schedule");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset(0)")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("FacebookPageId")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTimeOffset?>("ObviatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .HasName("IX_Slug");

                    b.HasIndex("NormalizedName", "NormalizedCity")
                        .IsUnique()
                        .HasName("IX_NameCity");

                    b.ToTable("School");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolSettings", b =>
                {
                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Locale2")
                        .IsRequired()
                        .HasColumnType("nchar(2)")
                        .IsFixedLength(true)
                        .HasMaxLength(2);

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("SchoolId");

                    b.ToTable("SchoolSettings");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(6, 3)");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentExam", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ExamId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(6, 3)");

                    b.HasKey("StudentId", "ExamId");

                    b.HasIndex("ExamId");

                    b.ToTable("StudentExam");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentExercise", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(6, 3)");

                    b.HasKey("StudentId", "ExerciseId");

                    b.HasIndex("ExerciseId");

                    b.ToTable("StudentExercise");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.TeacherCourse", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("TeacherId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TeacherCourse");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.User", b =>
                {
                    b.Property<int>("AspNetUserId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IdentifierCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset?>("IdentifierCodeCreatedAt")
                        .HasColumnType("datetimeoffset(0)");

                    b.Property<bool>("IsSelfDetermined")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("AspNetUserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.UserSchool", b =>
                {
                    b.Property<int>("AspNetUserId")
                        .HasColumnType("int");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EnrolledOn")
                        .HasColumnType("datetimeoffset(0)");

                    b.HasKey("AspNetUserId", "SchoolId");

                    b.HasIndex("SchoolId");

                    b.ToTable("UserSchool");
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Attendance", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", "Lecture")
                        .WithMany("Attendance")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Attendance_Lecture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Student")
                        .WithMany("Attendance")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_Attendance_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.BotFeedback", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Author")
                        .WithMany("BotFeedback")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_BotFeedback_AspNetUsers")
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Broadcast", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Broadcast")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Broadcast_Course");

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "CreatedByUser")
                        .WithMany("Broadcast")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_Broadcast_AspNetUsers")
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Broadcast")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Broadcast_School")
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Classroom", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Classroom")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Classroom_School")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Course", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("Course")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_Course_School")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.CourseBook", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", "Book")
                        .WithMany("CourseBook")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_CourseBook_Book")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("CourseBook")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_CourseBook_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exam", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", "Lecture")
                        .WithOne("Exam")
                        .HasForeignKey("Phoenix.DataHandle.Main.Models.Exam", "LectureId")
                        .HasConstraintName("FK_Exam_Lecture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Exercise", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", "Book")
                        .WithMany("Exercise")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_Exercise_Book")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Phoenix.DataHandle.Main.Models.Lecture", "Lecture")
                        .WithMany("Exercise")
                        .HasForeignKey("LectureId")
                        .HasConstraintName("FK_Exercise_Lecture")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Lecture", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Classroom", "Classroom")
                        .WithMany("Lecture")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_Lecture_Classroom");

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Lecture")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Lecture_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.Schedule", "Schedule")
                        .WithMany("Lecture")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_Lecture_Schedule")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Material", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Book", "Book")
                        .WithMany("Material")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK_Material_Book")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Phoenix.DataHandle.Main.Models.Exam", "Exam")
                        .WithMany("Material")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_Material_Exam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Parenthood", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Child")
                        .WithMany("ParenthoodChild")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("FK_Parenthood_AspNetUsers_Child")
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Parent")
                        .WithMany("ParenthoodParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Parenthood_AspNetUsers_Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.Schedule", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Classroom", "Classroom")
                        .WithMany("Schedule")
                        .HasForeignKey("ClassroomId")
                        .HasConstraintName("FK_Schedule_Classroom")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("Schedule")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_Schedule_Course")
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.SchoolSettings", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithOne("SchoolSettings")
                        .HasForeignKey("Phoenix.DataHandle.Main.Models.SchoolSettings", "SchoolId")
                        .HasConstraintName("FK_SchoolSettings_School")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentCourse", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("StudentCourse")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_StudentCourse_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Student")
                        .WithMany("StudentCourse")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentCourse_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentExam", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Exam", "Exam")
                        .WithMany("StudentExam")
                        .HasForeignKey("ExamId")
                        .HasConstraintName("FK_StudentExam_Exam")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Student")
                        .WithMany("StudentExam")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentExam_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.StudentExercise", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Exercise", "Exercise")
                        .WithMany("StudentExercise")
                        .HasForeignKey("ExerciseId")
                        .HasConstraintName("FK_StudentExercise_Exercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Student")
                        .WithMany("StudentExercise")
                        .HasForeignKey("StudentId")
                        .HasConstraintName("FK_StudentExercise_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.TeacherCourse", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.Course", "Course")
                        .WithMany("TeacherCourse")
                        .HasForeignKey("CourseId")
                        .HasConstraintName("FK_TeacherCourse_Course")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "Teacher")
                        .WithMany("TeacherCourse")
                        .HasForeignKey("TeacherId")
                        .HasConstraintName("FK_TeacherCourse_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.User", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "AspNetUser")
                        .WithOne("User")
                        .HasForeignKey("Phoenix.DataHandle.Main.Models.User", "AspNetUserId")
                        .HasConstraintName("FK_User_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Phoenix.DataHandle.Main.Models.UserSchool", b =>
                {
                    b.HasOne("Phoenix.DataHandle.Main.Models.AspNetUsers", "AspNetUser")
                        .WithMany("UserSchool")
                        .HasForeignKey("AspNetUserId")
                        .HasConstraintName("FK_UserSchool_AspNetUsers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Phoenix.DataHandle.Main.Models.School", "School")
                        .WithMany("UserSchool")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_UserSchool_School")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
